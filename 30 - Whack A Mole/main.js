const holes = document.querySelectorAll('.hole'); // holes is a NodeList that contains all of our six holes
const scoreBoard = document.querySelector('.score');
const moles = document.querySelectorAll('.mole');
const button = document.querySelector('button');
let lastHole;
let timeUp = false;
let score = 0;

// this function will give a random amount of time that the mole is going to be popping itself up.
function randomTime(min, max) {
  return Math.round(Math.random() * (max - min) + min);
};

// then we need another function that is going to pick a random hole for the mole to pop up from.
function randomHole(holes) {
  // holes is a NodeList that contains all of our six holes
  // console.log(holes.length);
  // So, we need to find a random index between 0 and 5 which is going to give us that one.
  const index = Math.floor(Math.random() * holes.length)
  const hole = holes[index];
  if (hole === lastHole) {
    console.log("Sorry, this is the same one buddy");
    // and then we will simply just run this function randomHole() again by passing it holes
    return randomHole(holes);
  }
  // console.log(hole);

  lastHole = hole; // this will save the reference to what got popped up last time this function was called.
  return hole;
};

// Next, we need to get the moles popping up.
function peep() {
  const time = randomTime(200, 1000);
  const hole = randomHole(holes);
  // console.log(time, hole);
  hole.classList.add('up');
  setTimeout(() => {
    hole.classList.remove('up');
    if (!timeUp) peep(); // if the condition returns true, peep() will stop
  }, time);
};

// When we click on the start button, the game will start.
function startGame() {
  scoreBoard.textContent = 0;
  timeUp = false;
  score = 0;
  peep();
  setTimeout(() => {
    timeUp = true
    button.disabled = false;
  }, 10000);
};

// Now we want to click on a mole each time one pops up.
function bonk(e) {
  // console.log(event);
  if (!e.isTrusted) return; // when we console.log event, we could see isTrusted = true
  // The isTrusted read-only property of the Event interface is a boolean value that is true when the event was generated by a user action,
  // and false when the event was created or modified by a script or dispatched via EventTarget.dispatchEvent().
  score++;
  this.parentNode.classList.remove('up');
  scoreBoard.textContent = score;

};

button.addEventListener('click', function() {
  button.disabled = true;
  startGame();
});

moles.forEach(mole => mole.addEventListener('click', bonk));
